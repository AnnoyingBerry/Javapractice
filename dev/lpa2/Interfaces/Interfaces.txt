****Interface
	- Abstract reference types - refers to coding to an interface
		- means the code uses more generalized type, and not specific types
	- can be use in code as variable types, method parameters, return types,list types
		e.g. Trackable track = new Bird(); // this is variabble type
				ArrayList<Trackable> track = new Arraylist();// this is list type
	- this technique is prefered because of its instances 
		processes uniformly in runtime
	- using interface types as reference is considered best practice

	
	***Interface vs Abstract Classes

		- An interface is similar to an abstract class, but it is not
		- A special type, like a contract between the class and client code
		- Must implement all the abstract methods
		- Allows classes that might have little 
			in common to be recognized as a special reference type


		** Abstract Class
			* inherit from Java.lang.object
			* Has a Constrcutor
			* Cannot be instantiate/object cannot be created
			* May contain a mix of method declaration, with or without method block
				- method has a method block(concrete method)
			* Can declare fields that are not static and final, meaning, instance fields
			* Can use any 4 access modifiers for its concrete methods
			* Can use all except private access modifier, for its abstract method
			* abstract class can extend only one parent class, but implement multiple interfaces
			* when an abstract class has subclasses(child), the child usually provides implementations
				for all its methods in its parent class
			* if it doesn't, the subclass must also declared abstract

			* When to use abstract class?
				- sharing code among several closely related classes(E.g. Animal)
				- you expect classes to have many ocmmon methods/fields/require access modifiers other than public
				- non static or non final fields
				- requirement for base class, to provide default implementation of some methods	
					while other methods should be open to be overriden by child classes
				

		** Interface
			* Declaration of methods, which you want only some classes to have, 
				its not the implementation
			* Do not have a Constrcutor
			* Cannot be instantiate/object cannot be created
			* May contain a mix of method declaration, with or without method block
				- method has a method block(concrete method)
			* define what kind of operation an object can perform
			* Forms a contract between classes and outside world,and it is enforce at build KM_TO_MILES
			* All methods decalred without a method body, are automatically public and abstract
			* Can extends another interface or multiple interfaces
			* Flexible, are not part of the class hierarchy
			* Coding to an interface, is the best practice
			* default methods are used mostly for backwards compatibility JDK8
			* JDK 9 can contain private methods, commonly used when default method share common code
			* Does not inherit from Java.lang.object

			* when to use interface?
				- unrelated classes will implement the interface
					E.g. Java own interfaces, Comparable and Clonable
				- specify the behaviour of a particular data type, but not concerned
					about who implements its behaviour
				- want to seperate different behavior
			


			


	*** Default method
		- backwards compatible way to do things

		default void transistion(){
			// add code here
			return null; (if needed)
		}

		** overriding the method
			* You can choose not to override at all
			* You can override the method so that the interface will not be excecuted
			* Override the method + the default method in the interface

	*** Static methods in an interfaces

		static void log(String description){
			// insert code here
		}

		** Do not need to specify a public access moditifer, it is implied
		** Calling a public static method, must use interface name as qalifier
			- InterfaceName.MethodName();
			- e.g. Comparator.natualOrder();

		** JDK 9 gives private static and non static methods
			- Addresses the problem of re-use of code within concrete methods
			- Private static method can only be accessable by
				- public static method
				- default method
				- private non static method
					- used to support defaukt nmethod and other private method
	*** Syntax/Declaration

		public interface FlightEnabled{}

		--------
		** using in a class

			public class Bird implements FlightEnabled{}

			- keyword: implements

		** instalizing
			 
			 // assign it to FlightEnabled interface variable, containing bird object
			 FlightEnabled flier = new Bird();

		** inheritance + interface

			// inherits from Animals but implementing FlightEnabled and Trackable interface
			public class Bird extends Animal implements FlightEnabled,Trackable{

			}

		** interface can be extended with multiple interfaces

			interface OrbitEarth extends FlightEnabled, trackable{}
		
		** invalids

			interface OrbitEarth implements FlightEnabled{} // invalid will not complile

		** Naming convention
			- usually ends like 'able'
			- e.g. Comparable and iterable
			- usualy means something is capabale of doing, a given set of behaviors

		** abstract modifier is implied on an interface
			- abstract is implicity declared
			- dont have to declare any method abstract
			- any method without body, is implicitly declared public and abstract
			"abstract" interface FlightEnabled{ // abstract modifier here is not needed,redundant}
	
	*** Interface methods Access modifiers

		** Class vs Interface
			- Classes without an access modifier, it is implicitly package private
			- Interface members without access modifier, it is implicity public

			* Protected modifier, on an interface, is a complier error
			* only concrete method can have private access
	


**** Final modifier
	- prevents any futher modifications to that component
	- Final method cannot be overriden by a subclass
	- final field means an object field 
		cannot be given a different value/reassinges after initialization
	- final static field is a class field that 
		cannot be given a different value/reassigned
	- final class cannot be overriden, no class can use it, in the extends clause
	- final variable means once assigned, any code in the block cannot change it.
	
**** constant
	- is a variable that cannot be changed
	- final variable of primitive type/String, initialized with a constant expression

	* Naming convention
	 	- usually uppercase letters with underscores between words




		


	
		